/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Service.ApiRequest;
import Service.ApiResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Base64;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

/**
 *
 * @author datba
 */
public class QR extends javax.swing.JFrame {

    
    
    private String createRquest(ApiRequest apiRequest) throws Exception {
        String apiUrl = "https://api.vietqr.io/v2/generate";
        // Tạo RestTemplate để thực hiện yêu cầu HTTP
        RestTemplate restTemplate = new RestTemplate();
        // Tạo headers cho request
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setAccept(MediaType.parseMediaTypes("application/json"));
        // Chuyển đổi đối tượng ApiRequest thành JSON
        ObjectMapper objectMapper = new ObjectMapper();
        String jsonRequest = objectMapper.writeValueAsString(apiRequest);
        // Tạo HttpEntity với request body là JSON và headers đã thiết lập
        HttpEntity<String> requestEntity = new HttpEntity<>(jsonRequest, headers);
        // Thực hiện yêu cầu POST
        ResponseEntity<String> response = restTemplate.exchange(apiUrl, HttpMethod.POST, requestEntity, String.class);
        // Trả về nội dung của response
        return response.getBody();
    }

    public BufferedImage base64ToImage(String base64String) {
        // Tách chuỗi Base64 thành phần dữ liệu
        String base64Image = base64String.split(",")[1]; // header như data:image/png;base64
        byte[] imageBytes = Base64.getDecoder().decode(base64Image);
        try (ByteArrayInputStream bais = new ByteArrayInputStream(imageBytes)) {
            BufferedImage image = ImageIO.read(bais);
            return image;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
    /**
     * Creates new form QR
     */
    public QR() {
        initComponents();
        int soTien = 100000;
        ImageIcon icon = null;
        

        

        Integer amount = soTien;
        String accountNo = "1033547785";
        String accountName = "VO THAI DUY";
        int acqId = 970436;
        String addInfo = "Xin ti tien an com di";
        String format = "text";
        String template = "compact";
        
        ApiRequest apiRequest = new ApiRequest();
        apiRequest.setAccountNo(Long.parseLong(accountNo));
        apiRequest.setAccountName(accountName);
        apiRequest.setAcqId(acqId);
        apiRequest.setAmount(amount);
        apiRequest.setAddInfo(addInfo);
        apiRequest.setFormat(format);
        apiRequest.setTemplate(template);
        try {
            String response = createRquest(apiRequest);
            // Chuyển đổi JSON thành đối tượng ApiResponse
            Gson gson = new Gson();
            ApiResponse dataResult = gson.fromJson(response, ApiResponse.class);
            // Set image cho ImageView
            BufferedImage image = base64ToImage(dataResult.getData().getQrDataURL());
            icon = new ImageIcon(image);
            qrIMG.setIcon(icon);  
        } catch (Exception e) {
        }
            
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        qrIMG = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(qrIMG, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(qrIMG, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QR().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel qrIMG;
    // End of variables declaration//GEN-END:variables
}
